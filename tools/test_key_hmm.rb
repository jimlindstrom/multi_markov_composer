#!/usr/bin/env ruby

$LOAD_PATH << '.'
require 'rubymusic_improv'
#require 'spec/vectors/fake_sensor_vectors'
require 'narray'
require 'hmm'

# see: http://research.microsoft.com/en-us/um/people/dan/chords/
# see: https://github.com/dtkirsch/hmm/blob/master/test/test_hmm.rb

pi = NArray[0.3987730061349692, 0.012269938650306792, 0.0015337423312883434, 0.0015337423312883434, 0.009202453987730006, 0.07822085889570582, 0.0030674846625767006, 0.0015337423312883434, 0.010736196319018365, 0.06134969325153394, 0.044478527607361755, 0.0030674846625767006, 0.0015337423312883434, 0.0015337423312883434, 0.11809815950920194, 0.01840490797546011, 0.0030674846625767006, 0.0015337423312883434, 0.012269938650306792, 0.1963190184049084, 0.0030674846625767006, 0.0030674846625767006, 0.0030674846625767006, 0.012269938650306792]
a = NArray[[0.25000000291989555, 0.0696083501095745, 0.003360701538960364, 0.0034055108945816497, 0.020876150914045596, 0.03913216460144801, 0.03027120784465435, 0.004119569632074966, 0.009584655336881596, 0.022358053200342284, 0.11634343676025813, 0.10469417123137886, 0.02909771963653024, 0.002579932493883357, 0.09410117914214397, 0.05909563002116383, 0.008513777232480957, 0.004054179635351349, 0.00659882426772301, 0.03549691374791448, 0.04272713464449952, 0.01939847976014237, 0.007174531346988072, 0.017407723087083108], [0.034186567217828784, 0.25000000875041917, 0.027235475234167486, 0.02759861491828833, 0.003452704100391297, 0.005792349532583261, 0.13799307410284398, 0.03338542128454371, 0.002876853516152986, 0.00234098180056015, 0.013570970433473547, 0.12296412548624502, 0.026201216665435526, 0.02090804158845979, 0.011830681893825669, 0.0852310163589386, 0.02759861490540888, 0.03285549394179037, 0.009437216298688596, 0.007330604339387909, 0.07694781077678077, 0.026201216668752067, 0.011628629829359952, 0.002432310355674063], [0.0008758284910153897, 0.019345284813240268, 0.25000000474468564, 0.12019870341696309, 0.0037593422475928106, 0.001261354791926532, 0.10016558582614271, 0.0727008287066628, 0.003132349789889111, 0.0010195547058543856, 0.0021108888655709556, 0.008925646265224522, 0.057056346495225035, 0.04552981186486088, 0.000515255069280338, 0.008838139925970918, 0.09014902752065253, 0.07154684725337726, 0.006850230022571058, 0.0009674718464720193, 0.01675632475312007, 0.0570563465024472, 0.05064552087643638, 0.01059330520481822], [0.0005040056338992752, 0.011132467869314676, 0.13651921167291578, 0.25000000276678935, 0.00432671394452053, 0.00072586120227693, 0.038427629836269676, 0.08367306529346548, 0.02523565676042156, 0.0023468581855489966, 0.000809823606407669, 0.010272732732523342, 0.06566746886702303, 0.05240131355777192, 0.0011860379536700219, 0.0050860098313485315, 0.06916973391791804, 0.08234492134784686, 0.039420440877402915, 0.0005567428626300067, 0.019285241724044246, 0.06566746887533519, 0.02914455069153319, 0.006096039989122743], [0.028902402506548883, 0.04234257691229913, 0.019971296461311978, 0.040475160849277464, 0.2500000086461222, 0.019325799007107267, 0.02248620039220299, 0.024480944071171018, 0.016876369941151277, 0.02952553563827586, 0.012794598867725852, 0.012022324966867531, 0.038425785573663995, 0.045994500929221756, 0.02377013458888949, 0.01339251641026636, 0.02023758041519456, 0.02409235764210789, 0.12456261443220427, 0.06874001008640265, 0.016927344147945722, 0.019212892789264066, 0.042635351827761514, 0.0428056928970163], [0.03808811712618415, 0.0147021498047365, 0.005008188472776811, 0.0050749643217159295, 0.05269666845633269, 0.25000000266760486, 0.011277698452770647, 0.006139069746295188, 0.03332759730080165, 0.06758392284091659, 0.033748591807816364, 0.008290783271738102, 0.019272016390144375, 0.02306801962617474, 0.055822866756110125, 0.04851068819831919, 0.053287125353149875, 0.006041624190946218, 0.10874923490356861, 0.10113982239166945, 0.025469151689984704, 0.004818004098145961, 0.006414982962279412, 0.021468709169817902], [0.00544041910001016, 0.10119400804128864, 0.038779940704732216, 0.039297006601202236, 0.0024581113259992747, 0.0008247587731932143, 0.2500000120074186, 0.0950734031027955, 0.004096282800773512, 0.0026666143222701085, 0.004600804685720619, 0.017508567242416156, 0.0373072847064822, 0.029770459523150314, 0.0006738169808229277, 0.020226400385193032, 0.07859401316572658, 0.0467821507035387, 0.004479142066664542, 0.0006325982969284285, 0.08765131545900784, 0.11192185413361369, 0.01655772742654857, 0.0034633084445030637], [0.0006134973580608953, 0.013550919210334206, 0.08308853121136792, 0.0841963783379093, 0.005266662504370068, 0.0008835495081088657, 0.09355153115532361, 0.25000000101850456, 0.004388275422261395, 0.001428348414916373, 0.0009857521615040932, 0.012504412585055063, 0.07993327048505966, 0.06378513505473707, 0.0007218482316429114, 0.00619091015007908, 0.04209818914930849, 0.10023378370951364, 0.00959685158468521, 0.0006776913835273306, 0.02347482657233825, 0.0799332704951776, 0.035476001950209876, 0.007420362346004622], [0.011293584249923478, 0.008830176878875558, 0.027071463411973695, 0.027432416271712317, 0.029171251514468324, 0.04534006088027748, 0.007620115604050386, 0.01659218726728938, 0.25000000750626394, 0.0295514322124698, 0.014292177472686636, 0.012222363646918012, 0.01302171657019038, 0.04156426704594035, 0.01117146573761024, 0.0010085447123161634, 0.0480067284530936, 0.016328819205101965, 0.04064833697074959, 0.046037175909636324, 0.0038242215826324484, 0.013021716571838666, 0.196496239270819, 0.08945353105316224], [0.03175059390167142, 0.009639952963273623, 0.01477703320772225, 0.007487030162467323, 0.03137808704933372, 0.055233477369522596, 0.012478383559929484, 0.009056891328934842, 0.046046015628694204, 0.25000000323376703, 0.022790678661170377, 0.020014833044542484, 0.014215880039506171, 0.017015977628702127, 0.042750017598799026, 0.030278430697349354, 0.014974060317946621, 0.008913131143474182, 0.052056478444292675, 0.08689872332163727, 0.006262385796467864, 0.007107940020652846, 0.10725801589333933, 0.10161597898680302], [0.10692398563864336, 0.07532381062557252, 0.011692503618573023, 0.005924201836486797, 0.016305142585044837, 0.034005929588377656, 0.04607712523174974, 0.007166373191964727, 0.02099612867389637, 0.0364818806051896, 0.25000000225972324, 0.029914286406846666, 0.011248484487147414, 0.008976063381616769, 0.06069462572213398, 0.045302719766360945, 0.008886302750583185, 0.007052621232076927, 0.02025752897148716, 0.054979110178968976, 0.09249683124663115, 0.03374545346571408, 0.002496152448044373, 0.013052736087166473], [0.022292141203544648, 0.09486382707180252, 0.05539667112256684, 0.028067646716676196, 0.026335364798357443, 0.007658025849044116, 0.031186274019217516, 0.033952798460224, 0.014628724736019755, 0.005237685686554189, 0.04239064638582306, 0.25000000775334, 0.026646500017840136, 0.021263368708173514, 0.007940949374656371, 0.028893165635892264, 0.14033823351788927, 0.033413865130202, 0.015995999185990893, 0.006777441991427005, 0.03912776012308426, 0.05329300004242632, 0.011826255586224917, 0.002473646883022878], [0.002726585453794386, 0.0481798185031763, 0.07385459044000303, 0.07483931835140042, 0.004681358504899828, 0.002356071991049415, 0.04157739893689656, 0.09053143352327866, 0.0078011797614904385, 0.002539221373908289, 0.000876201818732739, 0.011114750215198288, 0.2500000092364981, 0.11339290650460647, 0.0019248795735313364, 0.005502891035849623, 0.0374196591582374, 0.08909442658561713, 0.008530317397203528, 0.003011884964472825, 0.020865980862506073, 0.07104998570661492, 0.0315334205128304, 0.0065957095882038155], [0.0010362489177910687, 0.011444324235695639, 0.07017177777323341, 0.07110740151380256, 0.017791676683903804, 0.00447716950804748, 0.03950411181223872, 0.08601701799224687, 0.033354757260035006, 0.015681908191285232, 0.0008325093801524057, 0.0105605051420533, 0.06750702667852611, 0.2500000070030017, 0.001828894058843984, 0.005228485386993666, 0.07110740148061885, 0.0846516684467762, 0.032419787756753436, 0.0017170170829981651, 0.019825483607464944, 0.06750702668707112, 0.02996098365007959, 0.00626680975038664], [0.10071725966970707, 0.027023150421955848, 0.004873370021908462, 0.01975339316572688, 0.08680207648421373, 0.09934392346482838, 0.019204687732013368, 0.005973808419277004, 0.007721531327707597, 0.03510237372705319, 0.08343002519623591, 0.04180482946410484, 0.004688305334752312, 0.007482345890273893, 0.2500000028328608, 0.05010971042757198, 0.009876696578254237, 0.005878986059697835, 0.028144082062621992, 0.045114498183285744, 0.024783532210118978, 0.004688305335345757, 0.008323058880966948, 0.02916004710951705], [0.042441413695266765, 0.06867730577633599, 0.021055016179854495, 0.02133574973999887, 0.03203031637507353, 0.03134537159918536, 0.059265971290151376, 0.02580937469508464, 0.004448036746844321, 0.024974554247348676, 0.01523744218172303, 0.03802410832775284, 0.020255458591394073, 0.016163446760122154, 0.03237678049648055, 0.2500000064948532, 0.03200362459506303, 0.02539970206481522, 0.019455090847826914, 0.01803166210660131, 0.14276709801284504, 0.04051091718791619, 0.008989782153665311, 0.009401769833797143], [0.0013888392401082425, 0.0230074931353421, 0.18809634798435754, 0.047651074847449106, 0.005961352118610015, 0.009000832604940962, 0.10589127706384213, 0.05764242927239184, 0.01986841189374514, 0.004041880338026988, 0.0022315520432648894, 0.014153784563571106, 0.045238362146629504, 0.03609929909870514, 0.003676780440462869, 0.02102253294681852, 0.2500000035738306, 0.056727470041719845, 0.01629406046396864, 0.009204972511382022, 0.013285615606173036, 0.04523836215235576, 0.020077699986491813, 0.004199565925811997], [0.00130447272615809, 0.014406585694292592, 0.08833511782703295, 0.08951291944454409, 0.005599223455945445, 0.0009393408304001324, 0.04972939951533448, 0.10828175743287886, 0.004665371030531559, 0.0015185408105087665, 0.0010479970227564085, 0.013293997895434544, 0.08498061963131426, 0.0678128177081378, 0.0007674290021230739, 0.006581832288894621, 0.04475645970138534, 0.25000000532815, 0.010202840309514714, 0.0007204838903935436, 0.024957133565901245, 0.08498061964207108, 0.03771611757502203, 0.007888917671274424], [0.012703094324110955, 0.008132919749959128, 0.09973527935561602, 0.025266270783210164, 0.04899422791298007, 0.019885654433368337, 0.014036817052082698, 0.0305640372491253, 0.059258973812782646, 0.04157704568815529, 0.0020706825009049277, 0.0037524164411324896, 0.02398696590674814, 0.11484668528866993, 0.010830877316286706, 0.09289070108137568, 0.025266270771419148, 0.030078893781705827, 0.25000001079960277, 0.024403996003149388, 0.007044499258450212, 0.023986965909784407, 0.01064590056335138, 0.02004081401602844], [0.04279497415024635, 0.009819485271787559, 0.00633778414290948, 0.006422287934816698, 0.06025916504891689, 0.062171826446470534, 0.003567937728931686, 0.003884448349116583, 0.12535511546152972, 0.08977547891826895, 0.02003832024863589, 0.011445661629958054, 0.012194217584190392, 0.024326848218971936, 0.039175735880565485, 0.02384746614447334, 0.03692815560796279, 0.0038227904363957697, 0.037699220395269545, 0.2500000025554234, 0.020591908251889404, 0.006097108792867001, 0.03382525231459156, 0.06961880848581092], [0.00910098958759284, 0.033503750536477826, 0.02567886151244516, 0.02602124634612392, 0.0032553685836247837, 0.006553552976036898, 0.1445624791888293, 0.03147731414008655, 0.0027124301080748738, 0.004414371105544311, 0.00883487520217976, 0.06569720591446651, 0.04940742971616824, 0.019713065398357987, 0.0024539926935076496, 0.05931313484455697, 0.09107436216893222, 0.03097767421351204, 0.014829737582658226, 0.0014661036911405184, 0.25000000950404255, 0.09881485944484492, 0.010964008242933481, 0.009173177297862514], [0.0025756616618973077, 0.022756468392198657, 0.06976654147652774, 0.0706967620662609, 0.004422232800328238, 0.0014837714063624906, 0.11782793635990332, 0.08552027672487457, 0.0036846818061905965, 0.0011993343422896114, 0.003310806825370525, 0.03149855725703942, 0.06711717910217965, 0.053558153038736026, 0.0006061107815777968, 0.010396582620150035, 0.035348381016634255, 0.08416281196173481, 0.008058141531275705, 0.0005690338164345387, 0.039421986111345925, 0.2500000080540615, 0.029787961411719705, 0.006230619434906642], [0.0017466081721043813, 0.01543162063947898, 0.09462020053720888, 0.0479409016304151, 0.014994026704407446, 0.0025154383650476475, 0.053267668289631684, 0.05799302618740049, 0.07495971364759224, 0.01219939245699726, 0.0016838437117915465, 0.01423987172655717, 0.0455135141554684, 0.07263772968640984, 0.0032881276604459723, 0.0035250662839264525, 0.023970450804021146, 0.05707250192611335, 0.032786330732893304, 0.010032706292899079, 0.01336642232969789, 0.045513514161229486, 0.25000001797783805, 0.050701305920424294], [0.017155542722163998, 0.012492241841586045, 0.025532389108162412, 0.05174564195274704, 0.055025598956726055, 0.01683344294964527, 0.014373789380424842, 0.03129776732177347, 0.07686331405554021, 0.059254085278644425, 0.005452436490648176, 0.003842498152704711, 0.024562804697085674, 0.07840248774605456, 0.015305423822594517, 0.0057072399011380585, 0.02587282096429959, 0.03080097734480773, 0.03538835677575825, 0.05247867691840457, 0.021640835295313316, 0.024562804700194826, 0.06540881678294233, 0.25000000684064005]].transpose(1,0)

b = []
0.upto(11) do |offset|
  maj_scale = [1,0,1,0,1,1,0,1,0,1,0,1]
  maj_triad = [3,0,0,0,5,0,0,3,0,0,0,0]
  sum = maj_scale.zip(maj_triad).map{ |x| x[0]+x[1] }
  offset.times do
    sum = sum[-1..-1] + sum[0..-2]
  end
  k = sum.inject(:+).to_f
  b << sum.map{ |x| x/k }

  min_scale = [1,0,1,1,0,1,0,1,0.5,0.5,0.5,0.5]
  min_triad = [3,0,0,5,0,0,0,3,0,0,0,0]
  sum = min_scale.zip(min_triad).map{ |x| x[0]+x[1] }
  offset.times do
    sum = sum[-1..-1] + sum[0..-2]
  end
  k = sum.inject(:+).to_f
  b << sum.map{ |x| x/k }
end

PITCH_CLASSES = ["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]
CHORD_TYPES = ["Maj","Min"]
CHORDS = PITCH_CLASSES.map { |pitch_class| CHORD_TYPES.map { |chord_type| pitch_class + " " + chord_type } }.flatten

hmm = HMM::Classifier.new
hmm.o_lex = PITCH_CLASSES
hmm.q_lex = CHORDS
hmm.a = a
hmm.b = NArray.to_na(b).transpose(1,0)
hmm.pi = pi

def key_to_val(key)
  (key[:template_idx]*12) + key[:pitch_class].val
end

def key_to_name(key)
  template_names = ["M", "m"]
  key[:pitch_class].to_s + template_names[key[:template_idx]]
end

#0.upto($fake_sensor_vectors.length) do |vector_idx|
7.upto(7) do |vector_idx|
  begin
    vector = $fake_sensor_vectors.values[vector_idx]
    event_queue = MusicIR::EventQueue.new
    vector[:events].each { |e| event_queue.enqueue e }
    stimulus_notes = MusicIR::NoteQueue.from_event_queue(event_queue)

    if stimulus_notes &&  stimulus_notes.none?{ |item| item.is_a?(MusicIR::Rest) }
      puts "\n" + $fake_sensor_vectors.keys[vector_idx] + ":"
      max_likelihood = -1e9
      likeliest_chord_pitch_class = "<unknown>"
      0.upto(11) do |hmm_idx| 
        puts "\n#{["C ","C#","D ","D#","E ","F ","F#","G ","G#","A ","A#","B "][hmm_idx]} -> "
        pitch_class_strings = stimulus_notes.map do |note| 
          pc = MusicIR::PitchClass.from_pitch(note.pitch)  # raw PC (starting at A)
          pc = MusicIR::PitchClass.new( (pc.val+9+12-hmm_idx) % 12 ) # transpose down hmm_idx steps, and convert to starting at C
          pc.to_s(use_flats=false) # convert to string
          #["C","E","F"].sample
        end
        puts pitch_class_strings.first(20).join("\t")
        puts hmm.decode(pitch_class_strings.first(20)).join("\t")
        printf "%5.2f\n", pi[["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"].index(pitch_class_strings[0])]
        likelihood = hmm.likelihood(pitch_class_strings.first(20)) 
        puts "likelihood -> #{likelihood}"
        if likelihood > max_likelihood
          max_likelihood = likelihood
          likeliest_chord_pitch_class = ["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"][hmm_idx]
        end
      end
      puts "best guess: " + likeliest_chord_pitch_class
      
      #final_key_val = key_to_val(key_estimates[-1])
      #start_of_final_correct_streak = key_estimates.length-1
      #while (start_of_final_correct_streak > 0) && (key_to_val(key_estimates[start_of_final_correct_streak-1]) == final_key_val)
      #  start_of_final_correct_streak -= 1
      #end
      #
      #puts start_of_final_correct_streak
    end
  rescue Exception => e
    raise e
  end
end


